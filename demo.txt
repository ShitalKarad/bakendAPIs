//dotenv
DotEnv is a lightweight npm package that automatically loads environment variables from a .
 env file into the process. env object.

 //What Is Express JS?     
Express is a node js web application framework that provides broad features for building web and mobile 
applications. It is used to build a single page, multipage, and hybrid web application.

It's a layer built on the top of the Node js that helps manage servers and routes.

Why Express JS?
Express was created to make APIs and web applications with ease,
It saves a lot of coding time almost by half and still makes web and 
mobile applications are efficient.
Another reason for using express is that it is written in javascript as javascript is an easy language
 even if you don't have a previous
knowledge of any language. Express lets so many new developers enter the field of web development.
The reason behind creating an express framework for node js is:

Time-efficient
Fast 
Economical
Easy to learn
Asynchronous

//Features of Express JS
Fast Server-Side Development 
The features of node js help express saving a lot of time.

Middleware
Middleware is a request handler that has access to the application's request-response cycle.

Routing 
It refers to how an application's endpoint's URLs respond to client requests.

Templating 
It provides templating engines to build dynamic content on the web pages by creating HTML templates on the server

//exp-api-cli
 Express api cli allows you to create a new project within minutes with little or no configuration. You create
  your project and you start developing your business logic right away.

  // controller 
  accept the request from routes and pass it to service

  //scema 

  what type of document is present

  //mogoose
  Mongoose is a MongoDB ODM i.e (Object database Modelling) library that used to translate the code and its 
  representation from MongoDB to the Node. js server. Advantages of Mongoose module: Collection 
  validation of the MongoDB database can be done easily.

  mogoose is a object database module(odm) library it allows u to communicate your bakend to database
  it allows u to declre scemas and its validation.

  Mongoose is an Object Data Modeling (ODM) library for MongoDB. It defines a strongly-typed-schema, 
  with default values and schema validations which are later mapped to a MongoDB document. 

//what is odm(objecct database modeling)
  Mongoose, on the other hand, is an Object Data Modeling (ODM) library that provides a higher-level
   abstraction layer on top of MongoDB. It allows developers to define their data models using a schema-based 
   approach and provides a rich set of features that simplify the process of working with MongoDB.

  //logger
  Logger handles all logs in the application
  The Logger class provides logging functionality for an application. It can be used to display errors,
   warnings and debug messages.

//middlewares

Middleware functions are functions that have access to the request object ( req ), the response object ( res ), 
and the next middleware function in the application's request-response cycle. The next middleware 
function is commonly denoted by a variable named next .

Middleware to authenticate if user has a valid Authorization token
 * Authorization: Bearer <token>
 *
 * @param {Object} req
 * @param {Object} res
 * @param {Function} next

 //cors

 CORS or Cross-Origin Resource Sharing in Node.js is a mechanism by which a front-end client
  can make requests for resources to an external back-end server. The single-origin policy does 
 not allow cross-origin requests and CORS headers are required to bypass this feature

 //helmet
 What is Helmet? Helmet. js is an open source JavaScript library that helps you secure your Node. 
 js application by setting several HTTP headers.

 //Routing:
Express makes it easy to define routes for different HTTP methods (GET, POST, PUT, DELETE, etc.) and URL patterns.
 You can handle requests to specific routes with corresponding callback functions.

Middleware:
Middleware functions are functions that execute between the incoming request and the final route handler. 
They can perform tasks like logging, authentication, parsing request bodies, and more. Express 
allows you to define and use middleware to customize the request-response flow.

//param
params property is an object that contains the properties which are mapped to the named route "parameters".
 For example, if you have a route as /api/:name, then the "name" property is available as req.params.name.
  The default value of this object is {}.

  //Generic error response middleware for internal server errors.
  //Error response middleware for handling all app errors except generic errors.

  //API Call:
From your frontend or any API client (e.g., Postman), send a POST request to your API endpoint /api/users with
 the user data in the request body. This data will be handled by the controller and saved in the MongoDB database.

Remember to adapt this structure to your specific project's needs, and make sure to handle error cases and potential 
security concerns, such as data validation and sanitization.

//MongoDB is a document database. It stores data in a type of JSON format called BSON.

//Balance Between Security and Performance:

The reason 10 is often chosen as the default is that it strikes a reasonable balance between security and 
. A higher number of rounds increases security but also increases the time it takes to hash passwords. 
If the hashing process is too slow, it can impact the user experience, especially during login operations.

Conversely, if you use too few rounds, it might make it easier for attackers to crack passwords using
 modern hardware and techniques.

 What is an API?
APIs are mechanisms that enable two software components to communicate with each other using a set of definitions
 and protocols. For example, the weather bureau’s software system contains daily weather data. The weather app on 
 your phone “talks” to this system via APIs and shows you daily weather updates on your phone.

 //What are REST APIs?
REST stands for Representational State Transfer. REST defines a set of functions like GET, PUT, DELETE, etc.
 that clients can use to access server data. Clients and servers exchange data using HTTP.

The main feature of REST API is statelessness. Statelessness means that servers do not save client data between 
requests. Client requests to the server are similar to URLs you type in your browser to visit a website. 
The response from the server is plain data, without the typical graphical rendering of a web page.

Payload
The second part of the token is the payload, which contains the claims. Claims are statements about an 
entity (typically, the user) and additional data. There are three types of claims: registered, public, 
and private claims.

What is a payload in API?
In a REST API, a payload refers to the data or information that is sent by the client in a request to the server
 or the data that is returned by the server in response to a request.

Header
The header typically consists of two parts: the type of the token, which is JWT, and the signing 
algorithm being used, such as HMAC SHA256 or RSA.

What is authentication & authorization ?!
In simple words, Authentication is the process of verifying who a user is (who you are), and
Authorization is the process of verifying what they have access to (what you are allowed to do).

//logger methods

info: Used to log general information and operational details about the application's execution.
 This might include startup information, successful operations, or other noteworthy events.

debug: Used for logging detailed debugging information, often used during development to track the 
flow of code and identify issues.

warn (warning): Used to log warnings or alerts that don't necessarily indicate errors but might point 
out potential problems or issues.

error: Used to log errors and exceptions that occur during the execution of the application. This is
 important for tracking issues that need attention.

fatal (critical): Used to log critical errors or failures that might lead to the application crashing or 
becoming unusable.

trace: Used to log very detailed information, often providing insights into the specific flow of code 
execution. It's more detailed than debug.

log: A generic method used to log messages at a custom level. It's not as common as the other methods,
 as it's more flexible but less standardized.


logger.info('This is an information message.');
logger.debug('Debugging details here.');
logger.warn('This is a warning message.');
logger.error('An error occurred.');
logger.fatal('A critical failure.');
In the example above, the logger methods (info, debug, warn, error, fatal) are used to log messages 
at different levels of severity. 
The logger is configured to display log messages on the console and also save them to a log file named app.log.





